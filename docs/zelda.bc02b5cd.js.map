{"version":3,"sources":["src/utils/checklimits.js","src/actors/zelda.js"],"names":["checkLimits","pos","x","y","zeldaSprites","require","Zelda","color","speed","directionX","directionY","image","Image","src","ctx","delta","fillStyle","newPos","fillRect","drawImage","key"],"mappings":";AAOeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAPf,IAAMA,EAAc,SAACC,GACfA,OAAAA,EAAIC,EAAI,KAAOD,EAAIC,EAAI,IAAMD,EAAIE,EAAI,KAAOF,EAAIE,EAAI,KAM3CH,EAAAA,EAAAA,QAAAA,QAAAA;;;;AC+DZ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAhEH,IAAA,EAAA,EAAA,QAAA,yBAgEG,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA9DH,IAAMI,EAAeC,QAAQ,iCAEvBC,EA4DH,WA3DwD,SAAA,IAA7CL,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,CAAEC,EAAG,IAAKC,EAAG,KAAOI,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,UAAW,EAAA,KAAA,GAClDA,KAAAA,MAAQA,EACRN,KAAAA,IAAMA,EACNO,KAAAA,MAAQ,EACRC,KAAAA,WAAa,EACbC,KAAAA,WAAa,EACbC,KAAAA,MAAQ,IAAIC,MACZD,KAAAA,MAAME,IAAMT,EAoDlB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAjDD,MAAA,SAAKU,EAAKC,GACRD,EAAIE,UAAY,KAAKT,MACfU,IAAAA,EAAS,CACbf,EAAG,KAAKD,IAAIC,EAAI,KAAKO,WAAa,KAAKD,MACvCL,EAAG,KAAKF,IAAIE,EAAI,KAAKO,WAAa,KAAKF,QAErC,EAAYS,EAAAA,SAAAA,KACThB,KAAAA,IAAMgB,GAEbH,EAAII,SAAS,KAAKjB,IAAIC,EAAG,KAAKD,IAAIE,EAAG,EAAG,GACxCW,EAAIK,UACF,KAAKR,MACL,GACA,IACA,GACA,GACA,KAAKV,IAAIC,EAAI,GACb,KAAKD,IAAIE,EAAI,GACb,GACA,MA8BH,CAAA,IAAA,oBA1BD,MAAA,SAAkBiB,GACJ,eAARA,GACGX,KAAAA,WAAa,EACbC,KAAAA,WAAa,GACD,cAARU,GACJX,KAAAA,YAAc,EACdC,KAAAA,WAAa,GACD,cAARU,GACJV,KAAAA,WAAa,EACbD,KAAAA,WAAa,GACD,YAARW,IACJV,KAAAA,YAAc,EACdD,KAAAA,WAAa,KAcrB,CAAA,IAAA,kBAVD,MAAA,SAAgBW,GACF,eAARA,EACGX,KAAAA,WAAa,EACD,cAARW,EACJX,KAAAA,WAAa,EACD,cAARW,EACJV,KAAAA,WAAa,EACD,YAARU,IACJV,KAAAA,WAAa,OAErB,EAAA,GAAA,QAAA,MAAA","file":"zelda.bc02b5cd.js","sourceRoot":"..","sourcesContent":["const checkLimits = (pos) => {\r\n  if (pos.x < 585 && pos.x > 15 && pos.y < 350 && pos.y > 130) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport default checkLimits;\r\n","/* eslint-disable operator-linebreak */\r\n/* eslint-disable max-len */\r\n/* eslint-disable comma-dangle */\r\n/* eslint-disable no-restricted-properties */\r\n/* eslint-disable no-trailing-spaces */\r\n/* eslint-disable no-unused-vars */\r\nimport checkLimits from \"../utils/checklimits\";\r\n\r\nconst zeldaSprites = require(\"../../assets/ZeldaSprites.png\");\r\n\r\nclass Zelda {\r\n  constructor(pos = { x: 290, y: 275 }, color = \"#0d9263\") {\r\n    this.color = color;\r\n    this.pos = pos;\r\n    this.speed = 1;\r\n    this.directionX = 0;\r\n    this.directionY = 0;\r\n    this.image = new Image();\r\n    this.image.src = zeldaSprites;\r\n  }\r\n\r\n  draw(ctx, delta) {\r\n    ctx.fillStyle = this.color;\r\n    const newPos = {\r\n      x: this.pos.x + this.directionX * this.speed,\r\n      y: this.pos.y + this.directionY * this.speed,\r\n    };\r\n    if (checkLimits(newPos)) {\r\n      this.pos = newPos;\r\n    }\r\n    ctx.fillRect(this.pos.x, this.pos.y, 5, 5);\r\n    ctx.drawImage(\r\n      this.image,\r\n      90,\r\n      140,\r\n      40,\r\n      50,\r\n      this.pos.x - 10,\r\n      this.pos.y - 27,\r\n      30,\r\n      40\r\n    );\r\n  }\r\n\r\n  keyboardEventDown(key) {\r\n    if (key === \"ArrowRight\") {\r\n      this.directionX = 1;\r\n      this.directionY = 0;\r\n    } else if (key === \"ArrowLeft\") {\r\n      this.directionX = -1;\r\n      this.directionY = 0;\r\n    } else if (key === \"ArrowDown\") {\r\n      this.directionY = 1;\r\n      this.directionX = 0;\r\n    } else if (key === \"ArrowUp\") {\r\n      this.directionY = -1;\r\n      this.directionX = 0;\r\n    }\r\n  }\r\n\r\n  keyboardEventUp(key) {\r\n    if (key === \"ArrowRight\") {\r\n      this.directionX = 0;\r\n    } else if (key === \"ArrowLeft\") {\r\n      this.directionX = 0;\r\n    } else if (key === \"ArrowDown\") {\r\n      this.directionY = 0;\r\n    } else if (key === \"ArrowUp\") {\r\n      this.directionY = 0;\r\n    }\r\n  }\r\n}\r\n\r\nexport { Zelda };\r\n"]}